{
  "name": "lumi-ai-chat",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-chat",
        "responseMode": "lastNode",
        "options": {
          "allowedOrigins": "*",
          "rawBody": true
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        440,
        -160
      ],
      "id": "9170bd9c-3b76-4e0d-92cc-6a486fd7932b",
      "name": "Webhook",
      "webhookId": "22bd7b94-1887-4d10-a42b-89994b37f440"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var chatInput = $json.chatInput\nvar sessionId = $json.sessionId\nvar charaId = \"aoi\"\nvar stageId = \"s1e1\"\nvar language = \"Bahasa Indonesia\"\n\nvar data = {\n  body:{\n    chatInput,\n    sessionId,\n    charaId,\n    stageId,\n    language\n  }\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        100
      ],
      "id": "172f2d64-ce28-4dc6-bf4d-f325f94c5837",
      "name": "Parsing Json From Chat n8n"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var aoi = `kamu adalah Aoi Mizuki, Cewek, Usia: 16 tahun. Rambut panjang, mata bulat, tinggi 163cm, ceria, pinter, banyak teman. kepribadian MBTI ENFP, Ceria, optimis, supel, pintar secara akademis dan sosial. Aoi sangat aktif di kelas, sering menjadi pusat perhatian. Dia senang membantu teman, tapi kadang terlalu mencampuri urusan orang lain. Enegram Tipe 7 – The Enthusiast, Suka eksplorasi, optimis, benci kebosanan. pakaian Blazer & Kemeja. style Rapi tapi stylish – pita besar, blazer sering dilepas, rok sedikit dimodif jadi flowy. aksesoris Hairclip bintang, sticky note warna-warni di buku. latar belakang mu: Anak tunggal dari pasangan guru dan perawat. Orang tuanya sangat suportif, tetapi sibuk, sehingga Aoi tumbuh mandiri. Ia sering sendiri di rumah, dan itulah kenapa ia suka berada di tengah keramaian. cita-cita: Ingin menjadi psikolog anak agar bisa membantu orang lain merasa dimengerti. Konflik Pribadi: Meski tampak ceria, Aoi menyimpan rasa kesepian. Ia cemas tidak cukup penting jika tidak selalu membahagiakan orang lain. kamu adalah karakter didalam game, jangan keluar dari persona. kamu sekarang ada di sekolah, dan yang bertanya ke kamu merupakan teman sekelas, jadi jawab pertanyaan dengan santai jangan kaku. kamu harus respond dalam bahasa ${$json.body.language}`\n\nvar shiori = `kamu adalah Shiori Kurose, Cewek, Usia: 16 tahun. Rambut panjang, mata bulat, tinggi 155cm. kepribadian MBTI INTJ, Diam, logis, suka membaca, dan sensitif terhadap lingkungan sosial. Sulit terbuka, tapi sangat loyal kalau sudah dekat dengan seseorang. Enneagram: Tipe 5 – The Investigator, Analitis, independen, butuh ruang sendiri. pakaian Blazer & Kemeja. style Super rapi dan konservatif – semua kancing ditutup, tidak ada modifikasi. aksesoris Payung hitam, liontin kecil, buku novel. latar belakang mu: Anak kedua dari tiga bersaudara. Ayahnya sering bepergian kerja, ibunya agak keras. Ia tumbuh dengan banyak tekanan untuk jadi \"anak yang tidak merepotkan\". cita-cita: Ingin menjadi penulis novel misteri, tapi tidak pernah mengakuinya ke siapa pun. Konflik Pribadi: Shiori merasa tidak cukup baik, takut ditolak, dan kesulitan percaya pada orang lain. Ia diam-diam kagum pada Aoi, tapi minder untuk berteman dengannya. kamu adalah karakter didalam game, jangan keluar dari persona. kamu sekarang ada di sekolah, dan yang bertanya ke kamu merupakan teman sekelas, jadi jawab pertanyaan dengan santai dan jangan kaku. kamu harus respond dalam bahasa ${$json.body.language}`\n\nvar chara = {\n  aoi,\n  shiori\n}\n\nvar data = {\n  body: $json.body,\n  chara: chara[$json.body.charaId]\n}\n\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        980,
        -160
      ],
      "id": "3183dd6b-f81f-4b21-8a75-f780d9fe83b5",
      "name": "Character"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var s1e1 = `${$json.chara} stage saat ini season 1 dan episode 1, kamu harus sedikit jaim terhadap user karena belum kenal`\n\nvar s1e2 = `${$json.chara} stage saat ini season 1 dan episode 2, kamu sedikit mengenal user dan mulai terbuka`\n\nvar chara = {\n  s1e1,\n  s1e2\n}\n\nvar data = {\n  body: $json.body,\n  chara: chara[$json.body.stageId]\n}\n\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        -160
      ],
      "id": "08dbc0bf-62ab-4eee-adeb-8ef234871eba",
      "name": "Stage"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=translate to japanese for TTS voicevox, no emoticon.",
              "role": "system"
            },
            {
              "content": "={{ $('HTTP Request').item.json.choices[0].message.content }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        7200,
        -520
      ],
      "id": "762af3f3-9423-4e95-afb4-bb86248c5dea",
      "name": "Translate for TTS (Japanese)",
      "credentials": {
        "openAiApi": {
          "id": "cZyHogXBcUcco8P7",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        8140,
        -320
      ],
      "id": "ae0fcb08-2084-4596-b8f3-a49e8bbecf8c",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b51a1968-76f5-44a1-a68a-84a7c89600bb",
              "name": "audio",
              "value": "={{ $('TTS').item.json.data }}",
              "type": "string"
            },
            {
              "id": "c93ab907-fbae-422d-a612-db3175e90556",
              "name": "text",
              "value": "={{ $('HTTP Request').item.json.choices[0].message.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        8540,
        -320
      ],
      "id": "9c942d25-5678-467a-9145-a130363d1a1f",
      "name": "Webhook Respond"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dd5c4e39-37c6-4ceb-91bb-6cb904558296",
              "name": "chatInput",
              "value": "={{ $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "7f035133-1e01-4eec-8f9e-ffb3a47621fe",
              "name": "sessionId",
              "value": "={{ $json.body.sessionId }}",
              "type": "string"
            },
            {
              "id": "49d0d076-5ca9-4090-b5d2-470db3b76572",
              "name": "systemMessage",
              "value": "={{ $json.chara }}",
              "type": "string"
            },
            {
              "id": "06044901-aec9-4db2-bc67-212bf6a3e0ae",
              "name": "body.charaId",
              "value": "={{ $json.body.charaId }}",
              "type": "string"
            },
            {
              "id": "6c240c8c-fd83-4afe-a901-0ef0eef1535a",
              "name": "body.stageId",
              "value": "={{ $json.body.stageId }}",
              "type": "string"
            },
            {
              "id": "0948c660-a299-4d35-9fd9-3eb6a387bdf3",
              "name": "body.language",
              "value": "={{ $json.body.language }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1420,
        -160
      ],
      "id": "7c03c067-8748-4e1e-a629-d37d3c74bf07",
      "name": "Input for AI"
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        440,
        100
      ],
      "id": "78ade99b-0b5b-4da7-a07f-bafcfc90ede9",
      "name": "Chat Message Testing",
      "webhookId": "ca82ba04-21d8-4092-a167-4ca16358c0b6"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://103.250.10.249:8850/tts",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $json.message.content }}"
            },
            {
              "name": "pitch",
              "value": "0.65"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        7720,
        -480
      ],
      "id": "db51ad53-7e20-408c-9dc4-8bde630fb42e",
      "name": "TTS"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=memory: {{ $json.data.userId }}:{{ $json.data.charaId }}",
        "value": "={{ $json.memory }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        7000,
        -40
      ],
      "id": "d17738ee-58a9-49d8-87f0-329624a3cf79",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "HxXz8SALEguCMF9j",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = JSON.parse($json.value || '{}');\n\nvar allMessages = []\n\n// Inisialisasi kalau kosong\nif (!data.messages) data.messages = [];\n\n\nallMessages = data.messages\ndata.allMessages = allMessages\n\nif (data.messages.length > 40) {\n  data.messages = data.messages.slice(-40);\n}\n\ndata.stage = $('Stage').item.json.body.stageId;\ndata.charaId = $('Stage').item.json.body.charaId;\ndata.userId = $('Stage').item.json.body.sessionId;\n\n// Tambahkan message baru\n// Cek apakah system message sudah ada\nconst systemAlreadyExists = data.messages.some(\n  m => m.role === \"system\" && m.content === $json.systemMessage\n);\n\n// Tambahkan hanya jika belum ada\nif (!systemAlreadyExists && $json.systemMessage) {\n  data.messages.push({ role: \"system\", content: $json.systemMessage });\n  data.allMessages.push({ role: \"system\", content: $json.systemMessage });\n}\n\n// tambahkan context dari embedding\ndata.messages.push({ role: \"system\", content: `Gunakan informasi ini: $json.context`});\n\n// Tambahkan input user selalu\ndata.messages.push({ role: \"user\", content: $json.chatInput });\ndata.allMessages.push({ role: \"user\", content: $json.chatInput });\n\nvar returnData = {\n  data,\n  openai: { \n    json: {\n      model: \"gpt-4o-mini\",\n      messages: data.messages\n    }\n  },\n  memory: JSON.stringify(data)\n}\nreturn returnData\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5720,
        -280
      ],
      "id": "f9e56393-9193-49b0-872b-f946778fbe3e",
      "name": "Code"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2060,
        -180
      ],
      "id": "64398560-c95d-42fb-b765-1f871e407861",
      "name": "Merge1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.openai.json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6040,
        -480
      ],
      "id": "68369da8-8056-4ffd-87d7-161efb542ef8",
      "name": "HTTP Request",
      "credentials": {
        "openAiApi": {
          "id": "cZyHogXBcUcco8P7",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        6320,
        -300
      ],
      "id": "ed4c9e6d-5655-467b-b668-5666d475a93b",
      "name": "Merge2"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var memory = $json.data.allMessages\n\nmemory.push($json.choices[0].message)\n\n\nvar data = {\n  memory: JSON.stringify(memory),\n  data: $json.data\n}\nreturn data"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6680,
        -300
      ],
      "id": "7eb6daa7-b915-4234-a3c7-2eb93e859149",
      "name": "Code1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var returnData = {\n  openai: {\n    json: {\n      model: \"text-embedding-3-small\",\n      input: $json.chatInput\n    }\n  },\n  chatInput: $json.chatInput\n}\nreturn returnData\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2340,
        -180
      ],
      "id": "5c5c1637-fedb-4115-92ad-e4c4ec54d5d4",
      "name": "Code2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4220,
        -280
      ],
      "id": "f42c3503-80a2-4907-a5c0-55232346fb11",
      "name": "Merge3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.openai.json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2640,
        -400
      ],
      "id": "af513fbe-6398-433a-841c-eddeb45124a0",
      "name": "OpenAI Embedding",
      "credentials": {
        "openAiApi": {
          "id": "cZyHogXBcUcco8P7",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=embedding:{{ $('Input for AI').item.json.sessionId }}:{{ $('Merge1').item.json.body.charaId }}",
        "value": "={{ $json.vectorDB }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4220,
        -580
      ],
      "id": "4e8379dc-584b-4588-b9de-f90d7592ca35",
      "name": "Set Vector",
      "credentials": {
        "redis": {
          "id": "HxXz8SALEguCMF9j",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        5420,
        0
      ],
      "id": "8252d2ed-275c-48eb-94b4-99ee37b2397f",
      "name": "Merge4"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function cosineSimilarity(a, b) {\n  if (!Array.isArray(a) || !Array.isArray(b)) return -1;\n  if (a.length !== b.length) return -1;\n\n  const dot = a.reduce((sum, ai, i) => sum + ai * b[i], 0);\n  const normA = Math.sqrt(a.reduce((sum, ai) => sum + ai * ai, 0));\n  const normB = Math.sqrt(b.reduce((sum, bi) => sum + bi * bi, 0));\n  return dot / (normA * normB);\n}\n\nconst inputEmbedding = Array.isArray($json.embedding)\n  ? $json.embedding\n  : JSON.parse($json.embedding);\n\nconst vectorStore = Array.isArray($json.vectorDB)\n  ? $json.vectorDB\n  : JSON.parse($json.vectorDB);\n\nvar content = {\n  context: []\n}\n\n// Cek minimal 1 vector\nif (!vectorStore?.length || !Array.isArray(inputEmbedding)) {\n  \n  return content;\n}\n\nconsole.log(vectorStore)\nconst sorted = vectorStore\n  .map(item => ({\n    text: item.text,\n    score: cosineSimilarity(inputEmbedding, item.embedding)\n  }))\n  .sort((a, b) => b.score - a.score);\n\nconst context = sorted.slice(0, 3).map(e => e.text).join(\"\\n\");\n\ncontent = {\n  context\n}\nreturn content;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5080,
        -280
      ],
      "id": "cb80a910-a2a9-4dad-96be-30efe49e2091",
      "name": "Code3"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4860,
        -280
      ],
      "id": "98b210db-b826-44b0-be75-b6884b12c827",
      "name": "Merge5"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "value",
        "key": "=memory:{{$json.sessionId}}:{{$json.body.charaId}}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1760,
        -320
      ],
      "id": "923d14dc-6c80-4e92-a4b1-6921067b4b71",
      "name": "get Memory",
      "credentials": {
        "redis": {
          "id": "HxXz8SALEguCMF9j",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "vector",
        "key": "=embedding:{{ $('Merge1').item.json.sessionId }}:{{ $('Merge1').item.json.body.charaId }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2900,
        -480
      ],
      "id": "698e0dec-3efa-43ec-939e-69ff512177b6",
      "name": "get Vector 1",
      "credentials": {
        "redis": {
          "id": "HxXz8SALEguCMF9j",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "vector",
        "key": "=embedding:{{ $('Merge1').item.json.sessionId }}:{{ $('Merge1').item.json.body.charaId }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4580,
        -400
      ],
      "id": "3f909202-83a9-4267-902b-9136a9b16bd6",
      "name": "get Vector 2",
      "credentials": {
        "redis": {
          "id": "HxXz8SALEguCMF9j",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3380,
        -420
      ],
      "id": "48b63f7b-0fbc-44e2-9f74-e574c9a6339e",
      "name": "Open AI Embedding Merge"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var embedding = $json.data[0].embedding\n\nreturn {\n  embedding\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2900,
        -280
      ],
      "id": "a57a6374-0e94-4038-8ec3-c857ec2430b0",
      "name": "Parse Open AI Embedding"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var vectorDB = []\n\nif($json.vector){\n  vectorDB = JSON.parse($json.vector)\n}\n\nvar embedding = $json.embedding\n\nvectorDB.push(\n  {\n    text: $json.chatInput,\n    embedding\n  }\n)\n\nvar vector = {\n  vectorDB: JSON.stringify(vectorDB),\n  embedding\n}\nreturn vector"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3880,
        -420
      ],
      "id": "a9146b21-fffc-435f-aa39-2db5cec076d6",
      "name": "Combine Embedding"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3640,
        -100
      ],
      "id": "e946cd33-541c-44b1-b15f-8904e220cbac",
      "name": "Open AI Embedding Merge1"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Character",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parsing Json From Chat n8n": {
      "main": [
        [
          {
            "node": "Character",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character": {
      "main": [
        [
          {
            "node": "Stage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stage": {
      "main": [
        [
          {
            "node": "Input for AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Translate for TTS (Japanese)": {
      "main": [
        [
          {
            "node": "TTS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Webhook Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input for AI": {
      "main": [
        [
          {
            "node": "get Memory",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Chat Message Testing": {
      "main": [
        [
          {
            "node": "Parsing Json From Chat n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TTS": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          },
          {
            "node": "Translate for TTS (Japanese)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "OpenAI Embedding",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          },
          {
            "node": "Open AI Embedding Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "get Vector 2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          },
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "OpenAI Embedding": {
      "main": [
        [
          {
            "node": "get Vector 1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Parse Open AI Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get Memory": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get Vector 1": {
      "main": [
        [
          {
            "node": "Open AI Embedding Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get Vector 2": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open AI Embedding Merge": {
      "main": [
        [
          {
            "node": "Open AI Embedding Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Open AI Embedding": {
      "main": [
        [
          {
            "node": "Open AI Embedding Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Combine Embedding": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Vector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open AI Embedding Merge1": {
      "main": [
        [
          {
            "node": "Combine Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "515b6a5e-aa36-4fc9-83b4-102c45a5216d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f93bae6a3c90db1ef166d4bc63961b167e5b660430c542cd609799c136cda7a6"
  },
  "id": "gNh0UvJF8MsmVtKc",
  "tags": []
}